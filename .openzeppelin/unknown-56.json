{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x64BAFF2eB676cF1f773861DD529fbF86F24C6aAD",
      "txHash": "0xef245b54319eda9fbaee9d2090ce6aa0ed80ab5489d20b8544dc6f8644de1c9d",
      "kind": "uups"
    },
    {
      "address": "0x25C9A46a27a20A48806C3f7Df96C01626faeB0AD",
      "txHash": "0xc06d2dd4f3eefdf674b1454190dd9c4b9259060cc0a897061b137d0a3d5e8c2e",
      "kind": "uups"
    }
  ],
  "impls": {
    "0879d36a469819872f19a9df4020115c37d51b51d7acdbf142a97edcc151b61f": {
      "address": "0x195Db4026dc959dE602bA58e6753f673DF641bc3",
      "txHash": "0x87ad4eca81fea10a385864cce3bfa9458497a6e8e7c6d87f16f2b6f8c3b15254",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2499_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "harvestLog",
            "type": "t_array(t_struct(Harvest)3910_storage)dyn_storage",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:30"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "harvestLogCadence",
            "type": "t_uint256",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:31"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "lastHarvestTimestamp",
            "type": "t_uint256",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:32"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "upgradeProposalTime",
            "type": "t_uint256",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:34"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "cascadingAccess",
            "type": "t_array(t_bytes32)dyn_storage",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:54"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:61"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "vault",
            "type": "t_address",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:62"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "totalFee",
            "type": "t_uint256",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:81"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "securityFee",
            "type": "t_uint256",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:82"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "feeOnWithdrawAddresses",
            "type": "t_struct(AddressSet)2499_storage",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:87"
          },
          {
            "contract": "ReaperStrategyTHENABUSDStable",
            "label": "gauge",
            "type": "t_address",
            "src": "contracts/ReaperStrategyThenaStableSAMM.sol:79"
          },
          {
            "contract": "ReaperStrategyTHENABUSDStable",
            "label": "want",
            "type": "t_address",
            "src": "contracts/ReaperStrategyThenaStableSAMM.sol:80"
          },
          {
            "contract": "ReaperStrategyTHENABUSDStable",
            "label": "lpToken0",
            "type": "t_address",
            "src": "contracts/ReaperStrategyThenaStableSAMM.sol:81"
          },
          {
            "contract": "ReaperStrategyTHENABUSDStable",
            "label": "lpToken1",
            "type": "t_address",
            "src": "contracts/ReaperStrategyThenaStableSAMM.sol:82"
          },
          {
            "contract": "ReaperStrategyTHENABUSDStable",
            "label": "rewards",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ReaperStrategyThenaStableSAMM.sol:87"
          },
          {
            "contract": "ReaperStrategyTHENABUSDStable",
            "label": "THEToBUSDPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ReaperStrategyThenaStableSAMM.sol:88"
          },
          {
            "contract": "ReaperStrategyTHENABUSDStable",
            "label": "swapPath",
            "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))",
            "src": "contracts/ReaperStrategyThenaStableSAMM.sol:92"
          },
          {
            "contract": "ReaperStrategyTHENABUSDStable",
            "label": "stableSwap",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/ReaperStrategyThenaStableSAMM.sol:94"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(address => address[]))"
          },
          "t_mapping(t_address,t_array(t_address)dyn_storage)": {
            "label": "mapping(address => address[])"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_struct(Harvest)3910_storage)dyn_storage": {
            "label": "struct ReaperBaseStrategyv3.Harvest[]"
          },
          "t_struct(Harvest)3910_storage": {
            "label": "struct ReaperBaseStrategyv3.Harvest",
            "members": [
              {
                "label": "timestamp",
                "type": "t_uint256"
              },
              {
                "label": "vaultSharePrice",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)2499_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2198_storage"
              }
            ]
          },
          "t_struct(Set)2198_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2499_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a97fb142b8d99543747351168cc46b53ec9920e14e72e0d34dd67f1628d5a487": {
      "address": "0x862Ea3cd021779c2379f0EF43bcDF096E6d68e4B",
      "txHash": "0x258ef5dfdafc322142dce003e558f65b699a0357b0df616c07a844fc764ec8d1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ERC1967UpgradeUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:211"
          },
          {
            "contract": "UUPSUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:107"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)179_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "_roleMembers",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2499_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:22"
          },
          {
            "contract": "AccessControlEnumerableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol:76"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "harvestLog",
            "type": "t_array(t_struct(Harvest)4638_storage)dyn_storage",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:30"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "harvestLogCadence",
            "type": "t_uint256",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:31"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "lastHarvestTimestamp",
            "type": "t_uint256",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:32"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "upgradeProposalTime",
            "type": "t_uint256",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:34"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "cascadingAccess",
            "type": "t_array(t_bytes32)dyn_storage",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:54"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "treasury",
            "type": "t_address",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:61"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "vault",
            "type": "t_address",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:62"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "totalFee",
            "type": "t_uint256",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:81"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "securityFee",
            "type": "t_uint256",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:82"
          },
          {
            "contract": "ReaperBaseStrategyv3",
            "label": "feeOnWithdrawAddresses",
            "type": "t_struct(AddressSet)2499_storage",
            "src": "contracts/abstract/ReaperBaseStrategyv3.sol:87"
          },
          {
            "contract": "ReaperStrategyTHENABUSDStable",
            "label": "gauge",
            "type": "t_address",
            "src": "contracts/ReaperStrategyThenaStableSAMM.sol:79"
          },
          {
            "contract": "ReaperStrategyTHENABUSDStable",
            "label": "want",
            "type": "t_address",
            "src": "contracts/ReaperStrategyThenaStableSAMM.sol:80"
          },
          {
            "contract": "ReaperStrategyTHENABUSDStable",
            "label": "lpToken0",
            "type": "t_address",
            "src": "contracts/ReaperStrategyThenaStableSAMM.sol:81"
          },
          {
            "contract": "ReaperStrategyTHENABUSDStable",
            "label": "lpToken1",
            "type": "t_address",
            "src": "contracts/ReaperStrategyThenaStableSAMM.sol:82"
          },
          {
            "contract": "ReaperStrategyTHENABUSDStable",
            "label": "rewards",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ReaperStrategyThenaStableSAMM.sol:87"
          },
          {
            "contract": "ReaperStrategyTHENABUSDStable",
            "label": "THEToBUSDPath",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/ReaperStrategyThenaStableSAMM.sol:88"
          },
          {
            "contract": "ReaperStrategyTHENABUSDStable",
            "label": "swapPath",
            "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))",
            "src": "contracts/ReaperStrategyThenaStableSAMM.sol:92"
          },
          {
            "contract": "ReaperStrategyTHENABUSDStable",
            "label": "stableSwap",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "contracts/ReaperStrategyThenaStableSAMM.sol:94"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(address => address[]))"
          },
          "t_mapping(t_address,t_array(t_address)dyn_storage)": {
            "label": "mapping(address => address[])"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_struct(Harvest)4638_storage)dyn_storage": {
            "label": "struct ReaperBaseStrategyv3.Harvest[]"
          },
          "t_struct(Harvest)4638_storage": {
            "label": "struct ReaperBaseStrategyv3.Harvest",
            "members": [
              {
                "label": "timestamp",
                "type": "t_uint256"
              },
              {
                "label": "vaultSharePrice",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(AddressSet)2499_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2198_storage"
              }
            ]
          },
          "t_struct(Set)2198_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2499_storage)": {
            "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)179_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)179_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
